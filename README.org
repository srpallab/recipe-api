#+title: Learning Django REST from ~Udemy~
#+author: Shafiqur Rahman
#+options: h:1 num:nil toc:nil

* App Design
** 19 API Endpoints
   - Schema
     - GET ~/api/schema/~
   - Health Check
     - GET ~/api/health-check/~
   - Managing recipes
     - GET    ~/api/recipe/recipes/~
     - POST   ~/api/recipe/recipes/~
     - GET    ~/api/recipe/recipes/{id}/~
     - PUT    ~/api/recipe/recipes/{id}/~
     - PATCH  ~/api/recipe/recipes/{id}/~
     - DELETE ~/api/recipe/recipes/{id}/~
     - POST   ~/api/recipe/recipes/{id}/upload-image/~
   - Managing users
     - POST ~/api/user/create/~
     - POST ~/api/user/token/~
   - Managing tags
     - GET    ~/api/recipe/tags/~
     - PUT    ~/api/recipe/tags/{id}/~
     - PATCH  ~/api/recipe/tags/{id}/~
     - DELETE ~/api/recipe/tags/{id}/~
   - Managing Ingredients
     - GET    ~/api/recipe/ingredients/~
     - PUT    ~/api/recipe/ingredients/{id}/~
     - PATCH  ~/api/recipe/ingredients/{id}/~
     - DELETE ~/api/recipe/ingredients/{id}/~
** User Authentication
** Browse able Admin Interface (Django Admin)
** Browse able API (Swagger)
** Project Structure 
   - ~app/~        : Django Project
   - ~app/core/~   : Code shared between multiple apps
   - ~app/user/~   : User related code
   - ~app/recipe/~ : Recipe related code
* Intro to TDD
** Unit Test
   - Code which tests code
   - Sets up conditions/input
   - Runs a piece of code
   - Checks output with "assertions"
* System Setup
  - Docker, Docker compose
  - Git
* Project Setup 
** Docker
   - Define ~Dockerfile~
   - Create Docker Compose configuration
   - Run all commands via Docker Compose
** Docker Hub introduce rate limit 
   - 100 pulls / 6hr for unauthenticated users 
   - 200 pulls / 6hr for authenticated users
** GitHub Actions is a shared service
   - 100 pulls / 6hr applied for all users 
** Authenticate with Docker Hub
   - Create account
   - Setup credentials
   - Login before running job
   - Get200 pulls / 6hr for free. 
** Configure Docker
   - Choose python image as base image
   - Install dependencies
   - Setup users
** Configure Docker Compose
   - Define services
   - Name
   - Port mapping
   - Volume mapping
   - Command Example
     #+BEGIN_SRC bash
       docker-compose run --rm app sh -c "python manage.py collectstatic"
     #+END_SRC
     - ~docker-compose~ runs a Docker Compose command
     - ~run~ will start a specific container defined in configuration
     - ~--rm~ remove the container
     - ~app~ is the name of the service
     - ~sh -c~ passes in a shell command
     - ~"python manage.py collectstatic"~ command to run inside container 
** Linting 
   - Install flake8 package
   - Run it through Docker Compose
     #+BEGIN_SRC bash
       docker-compose run --rm app sh -c "flake8"
     #+END_SRC
** Testing 
   - Django test suite
   - Setup test per Django app
   - Run tests through Docker Compose
     #+BEGIN_SRC bash
       docker-compose run --rm app sh -c "python manage.py test"
     #+END_SRC
** Starting Django Project
   #+BEGIN_SRC bash
     docker-compose run --rm app sh -c "django-admin startproject app ."
   #+END_SRC
* Configure GitHub Actions
  - Automation tools
  - Similar to Travis-CI, GitLab, CI/CD, Jenkins
  - Run jobs when code changes
  - Automate tasks
** Common uses
   - Deployment
   - Code linting
   - Unit tests
** How it works
   - Trigger: Push to GitHub
   - Job: Run unit test
   - Result: Success or fail
** Pricing
   - Charged per minutes
   - 2,000 free minutes 
** Configure
   - Create a configuration file at ~.github/workflow/checks.yml~
   - Set trigger
   - Add steps for running and linting
   - Configure Docker Hub authenticate
** Authenticate Docker Hub
   - Use docker login
   - Add secrets to GitHub project Actions Menu
     - ~DOCKERHUB_TOKEN~
     - ~DOCKERHUB_USER~
* TDD with Django
** Django test framework
   - Based on the ~unittest~ library
   - Django adds features
     - Test client - dummy web browser
     - Simulation authentication
     - Temporary database
   - Django REST Framework adds features
     - API test client 
** Where do you put tests
   - Placeholder ~tests.py~ added to each app
   - Or, create ~tests/~ sub-directory to split tests up
   - keep in mind
     - Only use ~test.py~ or ~tests/~ directory (not both)
     - Test modules must start with ~test_~
     - Test directories must contain ~__init__.py~
** Test Database
   - Test code that uses the DB
   - Specific database for tests
   - Happens for every test
** Test Class
   - ~SimpleTestCase~
     - No database integration
     - Useful if no database is required for test
     - Save time executing tests
   - ~TestCase~
     - Database integration
     - Useful for testing code that uses the database 
** Writing tests
   - Import test Class
   - Import objects to test
   - Define test class
   - Add test method
   - Setup inputs
   - Execute code to be tested
   - Check output
** Mocking 
   - Override or change behave of dependencies
   - Avoid unintended side effects
   - Isolate code being tested
   - Example:
     #+begin_example
       register_user() ---> create_in_db() ---> send_welcome_email()
     #+end_example
   - use ~unittest.mock~
     - ~MagicMock/Mock~ replace real objects
     - ~patch~ override code for tests
** Testing API
   - Make actual requests
   - Check results
   - Django REST framework API Client
     - Based on Django Test Client
     - Make requests
     - Check results
     - Override any authentication
   - Using the API Client
     - Import ~APIClient~
     - Create client
     - Make request
     - Check result
* Setup and Configure Database
** PostgreSQL
   - Integrate well with Django
** Docker Compose
   - Define with project (re-usable)
   - Persistent data using volume
   - Handles network configuration
   - Environment variable configuration
** Network connectivity
   - Set ~depends_on~ on ~app~ service to start ~db~ first
   - Docker Compose creates a network
   - The ~app~ service can use ~db~ host name
** Volumes
   - Persistent data
   - Maps directory in container to local machine.
** Steps for configuring database
   - Tell Django how to connect
   - Install the tool Django uses to connect
   - Update requirements to install PostgreSQL adapter
   - Django settings 
     - Engine (type of Database)
     - ~Hostname~ (IP or domain name for database)
     - Port
     - Database Name.
     - Username
     - Password
   - Pull configuration values from environment variable
   - Easily passed to Docker
   - Used in local development or production
   - Single place to configure project
   - Easy to do with Python
** ~Psycopg2~
   - The package that you need in order for Django to connect to our Database
   - Most popular PostgreSQL adapter for Python.
   - ~psycopg2-binary~
     - Okay for development
     - Not good for production
   - ~psycopg2~
     - Compiles form source
     - Required additional dependencies
     - Easy to install with Docker
** Installing ~Psycopg2~
   - List of package dependencies in docs
     - C compiler
     - ~python3-dev~
     - ~libpq-dev~
   - Equivalent packages for Alpine
     - ~postgresql-client~
     - ~build-base~
     - ~postgresql-dev~
     - ~musl-dev~
** Problem with Docker compose
   - Using ~depends_on~ ensure service start, doesn't ensure
     application is running
   - Make Django "wait for db"
     - Check for database availability
     - Continue when database ready
   - Create custom Django management command
   - Create new app for db
     #+BEGIN_SRC bash
       docker-compose run --rm app sh -c "python manage.py startapp core"
     #+END_SRC
* Build Ingredients API
* Build Tags API
* Build Recipe API
* Build User API
* API Documentation
* Setup Django Admin
* Create User Model
* Recipe Image API
* Implementing Filtering
* Deploy on AWS
* Course Summary
* Upgrades
